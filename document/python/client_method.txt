#client_method.txt

//creating clients

'''
the behavior of your WebSocket client is defined by writing a protocol class
'''

//client protocol example

'''
class MyClientPRotocol(WebSocketClientProtocol):
	def onOpen(self):
		self.sendMessage(u'Hello,world!'.encode('utf8'))
	def onMessage(self,payload,isBinary):
		if isBinary:
			print('Binary message received: {0} bytes'.format(len(payload)))
		else:
			print('text message received: {0}'.format(payload.decode('utf8')))
'''

//twisted client example
'''
from autobahn.twisted.websocket import WebSocketClientProtocol

class MyClientProtocol(WebSocketClientProtocol):
	
	def onOpen(self):
		self.sendMessage(u'Hello,world!'.encode('utf8'))

	def onMessage(self,payload,isBinary):
		if isBinary:
			print('Binar message received: {0} bytes'.format(len(payload)))
		else:
			print('Text message received: {0}'.format(payload.decode('utf8')))
'''
'''
receiving and sending WebSocket messages as well as connection lifcycle in clients works exactly the same as with servers.
'''

//running a client
'''
1.create a Facotyr for producing instances of our protocol class
2.create a TCP connecting client using the former Factory
'''

'''
#twisted method

if __name__=='__main__':
	import sys

#setup twisted logging
	from twisted.python import log
	from twisted.internet import reactor
	log.startLogging(sys.stdout)

#create a autobahn.twisted.websocket.WebSocketClientFactory 
#and set our MyClientProtocol on the factory
	from autobahn.twisted.websocket import WebSocketclientFactory
	factory=WebSocketClientFactory()
	factory.protocol=MyClientProtocol

#start a client using the factory,connecting to localhost 127.0.0.1 on TCP port 9000
'''
